# run time : 20251014
input:
    # Set to True to load FASTQ paths from CSV file instead of raw_reads_paths below
    load_csv : True
    # Path to CSV file with columns: sample_id, lane, fastq1, fastq2
    fastq_csv : "/data2/litian/macrophage/data/20251014_hic_sample_append2.csv"
    
    # If load_csv is False, use this dictionary structure:
    raw_reads_paths:
        test1:
            lane1:
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATa_R1/lane1/SRR2601848_1.fastq.gz
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATa_R1/lane1/SRR2601848_2.fastq.gz
        test2:
            lane1:
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATa_R2/lane1/SRR2601851_1.fastq.gz
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATa_R2/lane1/SRR2601851_2.fastq.gz
        test3:
            lane1:
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATalpha_R1/lane1/SRR2601842_1.fastq.gz
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATalpha_R1/lane1/SRR2601842_2.fastq.gz
        test4:
            lane1:
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATalpha_R2/lane1/SRR2601845_1.fastq.gz
                - /data2/litian/macrophage/script/hic_pipeline/distiller-sm/test/fastq/MATalpha_R2/lane1/SRR2601845_2.fastq.gz
    
    # Set to True to automatically create an "all" group containing all libraries
    # If True, you don't need to manually list libraries in library_groups
    all_group : True
    
    # Define custom library groups (optional if all_group is True)
    # When all_group: True, an "all" group is auto-generated
#    library_groups:
#        test:
#            - test1
#            - test2
#            - test3
#            - test4
    truncate_fastq_reads: 0

    genome:
        assembly_name: 'hg38'
        fasta: "/data2/litian/database/bowtie2/resources/atacseq_pipeline/hg38/indices_for_Bowtie2/hg38.fa"
        bwa_index_wildcard_path: '/data2/litian/database/genome/GRCh38.primary_assembly.genome.fa.gz'
        bowtie_index_path: "/data2/litian/database/bowtie2/resources/atacseq_pipeline/hg38/indices_for_Bowtie2/hg38"
        chrom_sizes_path: '/data2/litian/database/chrom_size/hg38.chrom.sizes'

do_fastqc: True

# Control how reads are mapped to the reference genomes.
map:
    mapper: 'bowtie2' #available: 'bwa-mem', 'bwa-mem2', 'bwa-meme', 'chromap'ï¼Œ'bowtie2'
    # If using 'chromap', all parsing parameters are ignored, since chromap
    # outputs .pairs files directly.
    # In addition, chromap saves a minimal .pairs file with only the strictly requires
    # columns. It can not save mapq values, hence you have to remove the filter
    # that uses it - but you can set a custom minimum mapq value for the mapping
    # itself with -q extra argument to chromap.
    #
    # If 'chunksize' is non-zero, each input file gets split into multiple chunks,
    # each mapped separately. Useful for mapping on clusters with many
    # relatively weak nodes.
    # The optimal chunk size is defined by the balance between mapping and merging.
    # Smaller chunks (~30M) are better for clusters with many weak nodes,
    # however, having >~10 chunks per run slow down merging.
    chunksize: 0

    # Specify extra BWA/chromap/bowtie2 mapping options.
    mapping_options: ''
     # ligation sites (MboI)
    cutsite: 'GATCGATC'
    cutpattern: "^GATC"
    
    rescue_options:
        global_extra: '--very-sensitive -L 30 --score-min L,-0.6,-0.2 --end-to-end --reorder'
        local_extra: '--very-sensitive -L 20 --score-min L,-0.6,-0.2 --end-to-end --reorder'
        min_mapq: 10  # For mergeSAM.py
    # Specify fastp trim options.
    #i.e. parameters
    #--detect_adapter_for_pe -q 15
    trim_options: '--detect_adapter_for_pe -q 15'

    # A more technical option, use a custom script to split fastq files from SRA 
    # into two files, one per read side. By default it is true, which is
    # faster (because we can use multi-threaded compression), but less
    # stable. Set to false if you download files from SRA and bwa complains
    # about unpaired reads.
    use_custom_split: True

# Control how read alignments are converted ('parsed') into Hi-C pairs.
parse:
    fragment_file: "/data2/litian/macrophage/data/mboi_fragment.bed"
    # If 'make_pairsam' is True, parsed Hi-C pairs will store complete
    # alignment records in the SAM format (the resulting hybrid between the
    # .pairs and .sam formats is called '.pairsam'). Such files can be useful for
    # thorough investigation of Hi-C data. Downstream of parsing, pairsams
    # are split into .pairs and .bam, and .bam alignments are tagged with
    # Hi-C related information. 'make_pairsam' roughly doubles the storage
    # and I/O requirements and should be used only when absolutely needed.
    # NOTE: when 'make_pairsam' is False, the initial output of parsing is still
    # called '.pairsam' despite missing SAM alignments, for technical reasons.
    make_pairsam: False

    # When 'make_pairsam' is True, enabling 'drop_seq' erases sequences and
    # Phred scores from the SAM alignments in .pairsam and .bam output files.
    # Enable to make lightweight .pairsam/.bam output.
    # NOTE: when 'make_pairsam' is False, 'drop_seq' is ignored.
    drop_seq: True

    # Enable 'drop_readid' to drop readID from .pairs files to create
    # lightweight .pairs files. This would prevent one from detecting
    # optical/clustering duplicates during dedup.
    # NOTE: does not affect alignment records in the .pairsam files and
    # subsequently .bam files after .pairsam splitting.
    drop_readid: False

    # When 'keep_unparsed_bams' is True, distiller preserves the _immediate_
    # output of bwa in a .bam format. Could be used as a faster alternative
    # to 'make_pairsam' when alignments are needed, but tagging them with Hi-C
    # related information is not necessary.
    keep_unparsed_bams: True

    # Pass extra options to pairtools parse, on top of the ones specified by
    # flags 'make_pairsam', 'drop_readid', 'drop_seq'. The default value
    # enables storing MAPQ scores in the .pairsam/.pairs output, which are
    # used later for filtering/binning. The default walks-policy is 'mask'
    # which masks complex walks in long reads.
    parsing_options: '--add-columns mapq --walks-policy 5unique'

    # Phasing only works with 'bwa-mem', 'bwa-mem2' or bwa-meme mappers.
    # If 'do_phase' is True, distiller will try to phase Hi-C pairs using
    # the 'tag_mode' and 'suffixes' parameters.
    # 'tag_mode' can be 'XA' (default) or 'XB'.
    # 'XB' mode is slightly more accurate, but requires the 'bwa-mem' mapper with
    # version of 'bwa-mem' that supports 'XB' tags (>=0.7.18).
    # Suffixes are used to identify phases of chromosomes in the reference genome.
    # For example, if the reference genome has chromosomes 'chr1_cast', 'chr1_129',
    # then the suffixes '_cast' and '_129' will be used to identify the phases.
    # If 'do_phase' is False, no phasing will be performed.
    # NOTE: phasing requires parsing with --min-mapq 0 --add-columns XA,NM,AS,XS,mapq
    # (or XB,NM,AS,XS,mapq for 'XB' tag mode). This means that the
    # 'parsing_options' parameter must include these options, and that the phased pairs
    # contain multimapped reads. Please take care of the correct filtering of
    # phased pairs in the binning step.
    # Additionally, you probably want to add the following into the dedup_options, to
    # take phasing into account at that step:
    # --extra-col-pair phase1 phase1 --extra-col-pair phase2 phase2
    phase: 
        do_phase: False
        tag_mode: XA
        suffixes:
            - _cast
            - _129

# Control how PCR/optical duplicates are detected in the data.
dedup:
    # PCR/optical duplicates are detected as Hi-C pairs with matching locations
    # on both sides. 'max_mismatch_bp' controls the maximal allowed mismatch in
    # mapped locations on either side for two pairs to be still considered as
    # duplicates.
    max_mismatch_bp: 0
    save_by_tile_dups: True
    dedup_options: ""

# Scaling, or P(s), calculated using pairtools on the output of deduplication.
# Output stored next to the deduplicated pairs.
scaling_pairs:
    do_scaling: True
    # Shortest distance to consider when calculating P(s).
    min_distance: 10
    # Longest distance to consider when calculating P(s).
    # If False, use the longest chromosome
    max_distance: False
    # How many bins to use when calculating P(s).
    n_dist_bins_decade: 10
    # Any additional options to pass to pairtools scaling.
    scaling_options: ''

# Control how Hi-C pairs are binned into contact maps, stored in .cool files.
bin:
    # Specify which resolutions should be included in the multi-resolution .cool file.
    # The lowest (base) resolution _must_ be the common denominator of all other
    # resolutions.
    resolutions:
        - 10000000
        - 5000000
        - 2500000
        - 1000000
        - 500000
        - 250000
        - 100000
        - 50000
        - 25000
        - 10000
        - 5000
        - 2000
        - 1000

    resolution_for_mustache:
        - 1000000
        - 500000
        - 250000
        - 100000
        - 50000
        - 25000
        - 10000
        - 5000
        - 2000


    # Specify if the multi-resolution .cool output files should be balanced.
    balance: True

    # Pass additional parameters to cooler balance:
    # balance_options: ''

    # Specify additional filters applied to pairs during binning.
    # Multiple filters are allowed; for each filter, all pairs satisfying the
    # given filter expression will be binned into a separate cooler.
    # Filters are specified using the following syntax:
    # {filter_name}: '{a valid Python expression}'
    filters:
        # no_filter: ''
        # comment out the following when using chromap:
        mapq_30: '(mapq1>=30) and (mapq2>=30)'
    
    # Convert .mcool files to .hic files (uses hictk)
    make_hic: False

output_base_dir: '/data2/litian/macrophage/results/20251017_hic_run'

output:
    dirs:
        downloaded_fastqs: '/data2/litian/macrophage/results/20251017_hic_run/fastq'
        fastqc: '/data2/litian/macrophage/results/20251017_hic_run/fastqc'
        processed_fastqs: '/data2/litian/macrophage/results/20251017_hic_run/processed_fastqs'
        mapped_parsed_sorted_chunks: '/data2/litian/macrophage/results/20251017_hic_run/mapped_parsed_sorted_chunks'
        pairs_runs: '/data2/litian/macrophage/results/20251017_hic_run/pairs_runs'
        pairs_library: '/data2/litian/macrophage/results/20251017_hic_run/pairs_library'
        coolers_library: '/data2/litian/macrophage/results/20251017_hic_run/coolers_library'
        coolers_library_group: '/data2/litian/macrophage/results/20251017_hic_run/coolers_library_group'
        stats_library_group: '/data2/litian/macrophage/results/20251017_hic_run/stats_library_group'
        downstream_dist_folder: '/data2/litian/macrophage/results/20251017_hic_run/downstream_dist'
        downstream_loops_folder: '/data2/litian/macrophage/results/20251017_hic_run/downstream_loops'
        multiqc: '/data2/litian/macrophage/results/20251017_hic_run/multiqc'



# Mustache loop detection configuration
mustache:
    executable_path: "workflow/scripts/mustache.py"
    thresholds:
        10000000: "0.1"
        5000000: "0.1"
        2500000: "0.1"
        1000000: "0.1"
        500000: "0.1"
        250000: "0.1"
        100000: "0.1"
        50000: "0.1"
        25000: "0.1"
        10000: "0.1"
        5000: "0.2"
        2000: "0.2"
        1000: "0.2"
    sparse_params:
        10000000: "0.88"
        5000000: "0.88"
        2500000: "0.88"
        1000000: "0.88"
        500000: "0.88"
        250000: "0.88"
        100000: "0.88"
        50000: "0.88"
        25000: "0.88"
        10000: "0.88"
        5000: "0.7"
        2000: "0.7"
        1000: "0.7"
# To use automatic upload to resgen, add your credentials to  ~/.resgen/credentials
# (see https://docs-python.resgen.io/cli.html#logging-in)
resgen:
    upload: False
    user: Gilbert
    project: Macrophage_hic_test
