from pathlib import Path
import yaml
from urllib.parse import urlparse


include: "rules/common.smk"


# configfile: "config/config.yml"


localrules:
    merge_stats_libraries_into_groups,


downloaded_fastqs_folder = config["output"]["dirs"]["downloaded_fastqs"]
processed_fastqs_folder = config["output"]["dirs"]["processed_fastqs"]
fastqc_folder = config["output"]["dirs"]["fastqc"]
mapped_parsed_sorted_chunks_folder = config["output"]["dirs"][
    "mapped_parsed_sorted_chunks"
]
pairs_runs_folder = config["output"]["dirs"]["pairs_runs"]
pairs_library_folder = config["output"]["dirs"]["pairs_library"]
coolers_library_folder = config["output"]["dirs"]["coolers_library"]
coolers_library_group_folder = config["output"]["dirs"]["coolers_library_group"]
stats_library_group_folder = config["output"]["dirs"]["stats_library_group"]

assembly = config["input"]["genome"]["assembly_name"]
genome_path = config["input"]["genome"]["bwa_index_wildcard_path"].rstrip("*")
# custom_genome_folder = Path(config["genome"]["custom_genome_path"]).parent
chromsizes = config["input"]["genome"]["chrom_sizes_path"]

LIBRARY_RUN_FASTQS = organize_fastqs(config)
runs = [list(LIBRARY_RUN_FASTQS[lib].keys()) for lib in LIBRARY_RUN_FASTQS.keys()]
runs = [item for sublist in runs for item in sublist]

min_resolution = min(config["bin"]["resolutions"])

library_group_coolers = []
library_group_stats = []
if "library_groups" in config["input"] and len(config["input"]["library_groups"]) > 0:
    library_group_coolers = expand(
        f"{coolers_library_group_folder}/{{library_group}}.{assembly}.{{filter_name}}.{min_resolution}.mcool",
        library_group=config["input"]["library_groups"].keys(),
        filter_name=list(config["bin"]["filters"].keys()),
    )
    library_group_stats = expand(
        f"{stats_library_group_folder}/{{library_group}}.{assembly}.stats",
        library_group=config["input"]["library_groups"].keys(),
    )
library_coolers = expand(
    f"{coolers_library_folder}/{{library}}.{assembly}.{{filter_name}}.{min_resolution}.mcool",
    library=LIBRARY_RUN_FASTQS.keys(),
    filter_name=list(config["bin"]["filters"].keys()),
)
fastqc = []
if config["do_fastqc"]:
    for library in LIBRARY_RUN_FASTQS:
        fastqc += expand(
            f"{fastqc_folder}/{library}.{{run}}.{{side}}_fastqc.html",
            run=LIBRARY_RUN_FASTQS[library].keys(),
            side=[1, 2],
        )

resgen_uploads = (
    [f"{clr}_uploaded" for clr in library_coolers + library_group_coolers]
    if config["resgen"]["upload"]
    else []
)


rule default:
    input:
        library_group_coolers,
        library_group_stats,
        library_coolers,
        fastqc,
        resgen_uploads,


wildcard_constraints:
    library=f"({'|'.join([re.escape(lib) for lib in LIBRARY_RUN_FASTQS.keys()])})",
    library_group=f"({'|'.join([re.escape(lib) for lib in config['input']['library_groups'].keys()])})"
    if "library_groups" in config["input"]
    else "",
    run=f"({'|'.join([re.escape(run) for run in runs])})",
    chunk_id="[0-9]+",


# fasterq-dump just doesn't work for me on our server for some reason, but this code
# should work as an alternative
# Annoyingly, fasterq-dum doesn't have --gzip argument :(

# fasterq_dump_extra = {}
# fastq_accession_dict = {}
# for library in LIBRARY_RUN_FASTQS:
#     fastq_accession_dict[library] = {}
#     for run in LIBRARY_RUN_FASTQS[library]:
#         paths = LIBRARY_RUN_FASTQS[library][run]
#         if len(paths) == 1 and paths[0].startswith("sra:"):
#             parsed = urlparse(paths[0])
#             srr, query = parsed.path, parsed.query
#             if query:
#                 start, end = get_start_end(query)
#                 fasterq_dump_extra[srr] = f"--minSpotId {start}" if start else ""
#                 fasterq_dump_extra[srr] += f" --maxSpotId {end}" if end else ""
#             fastq_accession_dict[library][run] = srr


# rule fasterq_dump:
#     output:
#         # the wildcard name must be accession, pointing to an SRA number
#         temp(f"{downloaded_fastqs_folder}/{{accession}}_1.fastq.gz"),
#         temp(f"{downloaded_fastqs_folder}/{{accession}}_2.fastq.gz"),
#     log:
#         "logs/fasterq_dump/{accession}.log",
#     params:
#         extra=lambda wildcards: fasterq_dump_extra[wildcards.accession],
#     threads: 4
#     wrapper:
#         "v1.25.0/bio/sra-tools/fasterq-dump"


# rule rename_downloaded_fastq:
#     input:
#         fastq1=lambda wildcards: f"{downloaded_fastqs_folder}/{fastq_accession_dict[wildcards.library][wildcards.run]}_1.fastq.gz",
#         fastq2=lambda wildcards: f"{downloaded_fastqs_folder}/{fastq_accession_dict[wildcards.library][wildcards.run]}_2.fastq.gz",
#     output:
#         fastq1=f"{downloaded_fastqs_folder}/{{library}}.{{run}}.1.fastq.gz",
#         fastq2=f"{downloaded_fastqs_folder}/{{library}}.{{run}}.2.fastq.gz",
#     shell:
#         """
#         mv {input.fastq1} {output.fastq1}
#         mv {input.fastq2} {output.fastq2}
#         """


rule download_fastqs:
    output:
        fastq1=f"{downloaded_fastqs_folder}/{{library}}.{{run}}.1.fastq.gz",
        fastq2=f"{downloaded_fastqs_folder}/{{library}}.{{run}}.2.fastq.gz",
    log:
        "logs/download_fastqs/{library}.{run}.log",
    threads: 8
    conda:
        "envs/download_fastqs.yml"
    params:
        bgzip_threads=lambda wildcards, threads: max(1, (threads - 2) / 2),
    script:
        "scripts/download_split_fastq.py"


if config["map"]["chunksize"] > 0:
    chunk_command = """
        mkdir -p {output};
        zcat {input.fastq1} | split -l {params.chunksize} -d \
            --filter 'bgzip -c -@ {threads} > $FILE.fastq.gz' - \
            {output}/1.
        zcat {input.fastq2} | split -l {params.chunksize} -d \
            --filter 'bgzip -c -@ {threads} > $FILE.fastq.gz' - \
            {output}/2.
        """
else:
    chunk_command = """
        mkdir -p {output}
        cp {input.fastq1} {output}/1.00.fastq.gz
        cp {input.fastq2} {output}/2.00.fastq.gz
        """


checkpoint chunk_fastq:
    input:
        fastq1=lambda wildcards: (
            f"{downloaded_fastqs_folder}/{wildcards.library}.{wildcards.run}.1.fastq.gz"
            if needs_downloading(
                LIBRARY_RUN_FASTQS[wildcards.library][wildcards.run], 0
            )
            else LIBRARY_RUN_FASTQS[wildcards.library][wildcards.run][0]
        ),
        fastq2=lambda wildcards: (
            f"{downloaded_fastqs_folder}/{wildcards.library}.{wildcards.run}.2.fastq.gz"
            if needs_downloading(
                LIBRARY_RUN_FASTQS[wildcards.library][wildcards.run], 1
            )
            else LIBRARY_RUN_FASTQS[wildcards.library][wildcards.run][1]
        ),
    params:
        chunksize=lambda wildcards: config["map"]["chunksize"] * 4,
    threads: lambda wildcards: 4 if config["map"]["chunksize"] > 0 else 1
    conda:
        lambda wildcards: "envs/download_fastqs.yml" if config["map"][
            "chunksize"
        ] > 0 else None
    output:
        directory(f"{processed_fastqs_folder}/{{library}}/{{run}}"),
    benchmark:
        "benchmarks/chunk_runs/{library}.{run}.tsv"
    shell:
        chunk_command


rule fastqc:
    input:
        lambda wildcards: (
            f"downloaded_fastqs/{wildcards.library}.{wildcards.run}.{wildcards.side}.fastq.gz"
            if needs_downloading(
                LIBRARY_RUN_FASTQS[wildcards.library][wildcards.run],
                int(wildcards.side) - 1,
            )
            else LIBRARY_RUN_FASTQS[wildcards.library][wildcards.run][
                int(wildcards.side) - 1
            ]
        ),
    output:
        fastqc=f"{fastqc_folder}/{{library}}.{{run}}.{{side}}_fastqc.html",
    log:
        "logs/fastqc/{library}.{run}.{side}.log",
    benchmark:
        "benchmarks/fastqc/{library}.{run}.{side}.tsv"
    threads: 1
    wrapper:
        "v1.25.0/bio/fastqc"


if config["map"]["mapper"] == "bwa-mem":
    idx = multiext(
        genome_path,
        ".amb",
        ".ann",
        ".bwt",
        ".pac",
        ".sa",
    )

elif config["map"]["mapper"] == "bwa-mem2":
    idx = multiext(
        genome_path,
        ".0123",
        ".amb",
        ".ann",
        ".bwt.2bit.64",
        ".pac",
    )
else:
    idx = multiext(
        genome_path,
        ".0123",
        ".amb",
        ".ann",
        ".pac",
        ".pos_packed",
        ".suffixarray_uint64",
        ".suffixarray_uint64_L0_PARAMETERS",
        ".suffixarray_uint64_L1_PARAMETERS",
        ".suffixarray_uint64_L2_PARAMETERS",
    )


rule bwaindex:
    input:
        genome=genome_path,
    output:
        idx=idx,
    params:
        bwa=config["map"]["mapper"],
    threads: 8  #Only affects bwa-meme
    log:
        f"logs/bwa-memx_index/{assembly}.log",
    cache: True
    wrapper:
        "v1.25.0/bio/bwa-memx/index"


# faidx doesn't work with gzipped files :( So test fails, but probably should work
# with .fa, need to check
# rule faidx:
#     input:
#         genome_custom=config["input"]["genome"]["genome_fasta_path"],
#     output:
#         genome_faidx=f"{config['input']['genome']['genome_fasta_path']}.fai",
#     log:
#         f"logs/faidx/{assembly}.log",
#     params:
#         extra="",  # optional params string
#     wrapper:
#         "v1.25.0/bio/samtools/faidx"


# rule make_chromsizes:
#     input:
#         genome_faidx=f"{config['input']['genome']['genome_fasta_path']}.fai",
#     output:
#         chromsizes=chromsizes,
#     shell:
#         "cut -f1,2 {input.genome_faidx} > {output.chromsizes}"


rule trim:
    input:
        sample=[
            f"{processed_fastqs_folder}/{{library}}/{{run}}/1.{{chunk_id}}.fastq.gz",
            f"{processed_fastqs_folder}/{{library}}/{{run}}/2.{{chunk_id}}.fastq.gz",
        ],
    log:
        "logs/fastp/{library}.{run}.{chunk_id}.log",
    params:
        extra=config["map"]["trim_options"],
    output:
        # Would be better with a pipe, but it causes weird freezing of the pipeline
        trimmed=[
            temp(
                f"{processed_fastqs_folder}/{{library}}/{{run}}/1.{{chunk_id}}_trimmed.fastq.gz"
            ),
            temp(
                f"{processed_fastqs_folder}/{{library}}/{{run}}/2.{{chunk_id}}_trimmed.fastq.gz"
            ),
        ],
        json=f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.fastp.json",
        html=f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.fastp.html",
    wrapper:
        "v1.25.0/bio/fastp"


if config["parse"]["keep_unparsed_bams"]:

    # mapped_output = f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.bam",
    ruleorder: map_chunks_bwa > map_chunks_bwa_pipe

else:

    # mapped_output = pipe(f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.bam"),
    ruleorder: map_chunks_bwa_pipe > map_chunks_bwa


rule map_chunks_bwa:
    input:
        reads=lambda wildcards: [
            f"{processed_fastqs_folder}/{{library}}/{{run}}/1.{{chunk_id}}_trimmed.fastq.gz",
            f"{processed_fastqs_folder}/{{library}}/{{run}}/2.{{chunk_id}}_trimmed.fastq.gz",
        ]
        if config["map"]["trim_options"]
        else [
            f"{processed_fastqs_folder}/{{library}}/{{run}}/1.{{chunk_id}}.fastq.gz",
            f"{processed_fastqs_folder}/{{library}}/{{run}}/2.{{chunk_id}}.fastq.gz",
        ],
        reference=genome_path,
        idx=idx,
    params:
        bwa=config["map"]["mapper"],
        extra="-SP",
        sort="none",
        dedup="none",
    threads: 20
    output:
        f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.bam",
    log:
        "logs/bwa_memx/{library}.{run}.{chunk_id}.log",
    benchmark:
        "benchmarks/bwa_memx/{library}.{run}.{chunk_id}.tsv"
    wrapper:
        "v1.25.0/bio/bwa-memx/mem"


use rule map_chunks_bwa as map_chunks_bwa_pipe with:
    params:
        sort="none",
    output:
        pipe(
            f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.bam"
        ),


rule parse_sort_chunks:
    input:
        bam=f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.bam",
        chromsizes=chromsizes,
    threads: 4
    params:
        dropsam_flag="" if config["parse"].get("make_pairsam", False) else "--drop-sam",
        dropreadid_flag="--drop-readid"
        if config["parse"].get("drop_readid", False)
        else "",
        dropseq_flag="--drop-seq" if config["parse"].get("drop_seq", True) else "",
        parsing_options=config["parse"].get("parsing_options", ""),
        # keep_bams_command=f"| tee >(samtools view -bS > {mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.{assembly}.bam)"
        # if config["parse"]["keep_unparsed_bams"]
        # else "",
    conda:
        "envs/pairtools_cooler.yml"
    output:
        f"{mapped_parsed_sorted_chunks_folder}/{{library}}/{{run}}/{{chunk_id}}.{assembly}.pairs.gz",
    benchmark:
        "benchmarks/parse_sort_chunks/{library}.{run}.{chunk_id}.tsv"
    log:
        "logs/parse_sort_chunks/{library}.{run}.{chunk_id}.log",
    shell:
        """
        pairtools parse {params.dropsam_flag} {params.dropreadid_flag} {params.dropseq_flag} \
        {params.parsing_options} \
        -c {input.chromsizes} {input.bam} \
        | pairtools sort --nproc {threads} -o {output} \
        >{log[0]} 2>&1
        """


def get_pair_chunks(wildcards):
    checkpoint_output = checkpoints.chunk_fastq.get(**wildcards).output
    chunk_ids = glob_wildcards(
        f"{processed_fastqs_folder}/{wildcards.library}/{wildcards.run}/2.{{chunk_id}}.fastq.gz",
    ).chunk_id
    paths = expand(
        f"{mapped_parsed_sorted_chunks_folder}/{wildcards.library}/{wildcards.run}/{{chunk_id}}.{assembly}.pairs.gz",
        chunk_id=chunk_ids,
    )
    return paths


rule merge_runs:
    input:
        get_pair_chunks,
    threads: 4
    conda:
        "envs/pairtools_cooler.yml"
    output:
        f"{pairs_runs_folder}/{{library}}/{{run}}.{assembly}.pairs.gz",
    log:
        "logs/merge_runs/{library}.{run}.log",
    benchmark:
        "benchmarks/merge_runs/{library}.{run}.tsv"
    params:
        command=lambda wildcards, input, threads, output: f"pairtools merge {input} --nproc {threads} -o {output}"
        if len(input) > 1
        else f"cp {input} {output}",
    shell:
        """{params.command} \
        >{log[0]} 2>&1
        """


if config["parse"]["make_pairsam"]:
    dedup_command = """pairtools dedup {params.dedup_options} \
        --max-mismatch {params.max_mismatch_bp} \
        --mark-dups \
        --output \
            >( pairtools split \
                --output-pairs {output[0]} \
                --output-sam {output[1]} \
             ) \
        --output-unmapped \
            >( pairtools split \
                --output-pairs {output[2]} \
                --output-sam {output[3]} \
             ) \
        --output-dups \
            >( pairtools split \
                --output-pairs {output[4]} \
                --output-sam {output[5]} \
             ) \
        --output-stats {output[6]} \
        --yaml \
        -
    pairix {output[0]}
    """
    merge_output = multiext(
        f"{pairs_library_folder}/{{library}}.{assembly}",
        ".nodups.pairs.gz",
        ".nodups.bam",
        ".unmapped.pairs.gz",
        ".unmapped.bam",
        ".dups.pairs.gz",
        ".dups.bam",
        ".dedup.stats",
        ".nodups.pairs.gz.px2",
    )
else:
    dedup_command = """pairtools dedup {params.dedup_options} \
        --max-mismatch {params.max_mismatch_bp} \
        --mark-dups \
        --output {output[0]} \
        --output-unmapped {output[1]} \
        --output-dups {output[2]} \
        --output-stats {output[3]} \
        --yaml
        
        pairix {output[0]}
    """
    merge_output = multiext(
        f"{pairs_library_folder}/{{library}}.{assembly}",
        ".nodups.pairs.gz",
        ".unmapped.pairs.gz",
        ".dups.pairs.gz",
        ".dedup.stats",
        ".nodups.pairs.gz.px2",
    )


rule merge_dedup:
    input:
        pairs=lambda wildcards: expand(
            f"{pairs_runs_folder}/{wildcards.library}/{{run}}.{assembly}.pairs.gz",
            run=list(LIBRARY_RUN_FASTQS[wildcards.library].keys()),
        ),
    params:
        dedup_options=lambda wildcards: config["dedup"].get("dedup_options", ""),
        max_mismatch_bp=config["dedup"]["max_mismatch_bp"],
        merge_command=lambda wildcards, input, threads: f"pairtools merge {input} --nproc {threads} | "
        if len(input) > 1
        else f"bgzip -dc -@ {threads-1} {input} | ",
    threads: 4
    conda:
        "envs/pairtools_cooler.yml"
    output:
        merge_output,
    log:
        "logs/merge_dedup/{library}.log",
    benchmark:
        "benchmarks/merge_dedup/{library}.tsv"
    shell:
        "{params.merge_command}" + dedup_command + " >{log[0]} 2>&1"


# balance_args = "--balance" if {config["bin"].get("balance", True)} else ""
# balance_options = config["bin"].get("balance_options", "")
# if balance_args and balance_options:
#     balance_args = f"{balance_args} {balance_options}"


rule bin_pairs_library:
    input:
        pairs=f"{pairs_library_folder}/{{library}}.{assembly}.nodups.pairs.gz",
        chromsizes=chromsizes,
    params:
        filter_command=lambda wildcards: f'| pairtools select "{config["bin"]["filters"][wildcards.filter_name]}"'
        if config["bin"]["filters"][wildcards.filter_name]
        else "",
    threads: 4
    conda:
        "envs/pairtools_cooler.yml"
    output:
        cool=f"{coolers_library_folder}/{{library}}.{assembly}.{{filter_name}}.{{min_resolution}}.cool",
    log:
        "logs/bin_pairs_library/{library}.{filter_name}.{min_resolution}.log",
    benchmark:
        "benchmarks/bin_pairs_library/{library}.{filter_name}.{min_resolution}.tsv"
    shell:
        f"""
        bgzip -dc -@ {{threads}} {{input.pairs}} {{params.filter_command}} | cooler cload pairs \
        -c1 2 -p1 3 -c2 4 -p2 5 \
        --assembly {assembly} \
        {{input.chromsizes}}:{{wildcards.min_resolution}} \
        - \
        {{output.cool}} >{{log[0]}} 2>&1
        """


rule zoom_library:
    input:
        cool=f"{coolers_library_folder}/{{library}}.{assembly}.{{filter_name}}.{{min_resolution}}.cool",
    params:
        res_string=",".join([str(res) for res in config["bin"]["resolutions"]]),
        balance_args=lambda wildcards, threads: f"--balance-args '{config['bin']['balance_options']} --nproc {threads}'",
    threads: 8
    conda:
        "envs/pairtools_cooler.yml"
    output:
        mcool=f"{coolers_library_folder}/{{library}}.{assembly}.{{filter_name}}.{{min_resolution}}.mcool",
    log:
        "logs/zoom_library/{library}.{filter_name}.{min_resolution}.log",
    benchmark:
        "benchmarks/zoom_library/{library}.{filter_name}.{min_resolution}.tsv"
    shell:
        f"""
        cooler zoomify \
        --nproc {{threads}} \
        --out {{output.mcool}} \
        --resolutions {{params.res_string}} \
        {"--balance" if config['bin']['balance'] else ""} \
        {{params.balance_args}} \
        {{input.cool}} \
        >{{log[0]}} 2>&1
        """


rule merge_zoom_library_group_coolers:
    input:
        lambda wildcards: expand(
            f"{coolers_library_folder}/{{library}}.{assembly}.{wildcards.filter_name}.{wildcards.min_resolution}.cool",
            library=config["input"]["library_groups"][wildcards.library_group],
        ),
    params:
        res_string=",".join([str(res) for res in config["bin"]["resolutions"]]),
        balance_args=lambda wildcards, threads: f"--balance-args '{config['bin']['balance_options']} --nproc {threads}'",
    threads: 8
    conda:
        "envs/pairtools_cooler.yml"
    output:
        cool=f"{coolers_library_group_folder}/{{library_group}}.{assembly}.{{filter_name}}.{{min_resolution}}.cool",
        mcool=f"{coolers_library_group_folder}/{{library_group}}.{assembly}.{{filter_name}}.{{min_resolution}}.mcool",
    log:
        "logs/merge_zoom_library_group_coolers/{library_group}.{filter_name}.{min_resolution}.log",
    benchmark:
        "benchmarks/merge_zoom_library_group_coolers/{library_group}.{filter_name}.{min_resolution}.tsv"
    shell:
        f"""
        cooler merge {{output.cool}} {{input}} >{{log[0]}} 2>&1

        cooler zoomify \
        --nproc {{threads}} \
        --out {{output.mcool}} \
        --resolutions {{params.res_string}} \
        {"--balance" if config['bin']['balance'] else ""} \
        {{params.balance_args}} \
        {{output.cool}} \
        >{{log[0]}} 2>&1
        """


rule merge_stats_libraries_into_groups:
    input:
        lambda wildcards: expand(
            f"{pairs_library_folder}/{{library}}.{assembly}.dedup.stats",
            library=config["input"]["library_groups"][wildcards.library_group],
        ),
    conda:
        "envs/pairtools_cooler.yml"
    log:
        "logs/merge_stats_libraries_into_groups/{library_group}.log",
    output:
        f"{stats_library_group_folder}/{{library_group}}.{assembly}.stats",
    shell:
        "pairtools stats --merge --yaml {input} -o {output} >{log[0]} 2>&1"


rule resgen_upload_library_group:
    input:
        mcool=f"{coolers_library_group_folder}/{{library_group}}.{assembly}.{{filter_name}}.{{min_resolution}}.mcool",
    conda:
        "envs/resgen_python.yml"
    log:
        f"logs/resgen_upload_library_group/{{library_group}}.{assembly}.{{filter_name}}.{{min_resolution}}.log",
    params:
        user=config["resgen"]["user"],
        project=config["resgen"]["project"],
        assembly=assembly,
    output:
        touch(
            f"{coolers_library_group_folder}/{{library_group}}.{assembly}.{{filter_name}}.{{min_resolution}}.mcool_uploaded"
        ),
    shell:
        """resgen sync datasets {params.user} {params.project} {input.mcool} \
        --tag filetype:cooler --tag assembly:{params.assembly} --tag datatype:matrix \
        >{log[0]} 2>&1
        """


use rule resgen_upload_library_group as resgen_upload_library with:
    input:
        mcool=f"{coolers_library_folder}/{{library}}.{assembly}.{{filter_name}}.{{min_resolution}}.mcool",
    log:
        f"logs/resgen_upload_library/{{library}}.{assembly}.{{filter_name}}.{{min_resolution}}.log",
    output:
        touch(
            f"{coolers_library_folder}/{{library}}.{assembly}.{{filter_name}}.{{min_resolution}}.mcool_uploaded"
        ),
